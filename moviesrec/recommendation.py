# AUTOGENERATED! DO NOT EDIT! File to edit: mle-2020/03_recommendation.ipynb (unless otherwise specified).

__all__ = ['get_most_similar', 'get_recommendations']

# Cell
import pandas as pd
from .features_store import movies , ratings , users , genre_and_title_cols , genre_cols
from .similarities import dot_product_similarity

# Cell
# export
import sys
sys.path.insert(1 , '/Users/pierre-yvesthumerel/Desktop/kaggle/_interview/mle-2020/mle-2020')

# Cell
from content_based_filtering.helpers.movies import get_movie_id, get_movie_name, get_movie_year

# Cell
def get_most_similar(similarity, movie_name, year=None, top=10):
    index_movie = get_movie_id(movies, movie_name, year)
    best = similarity[index_movie].argsort()[::-1]
    return [(ind, get_movie_name(movies, ind), similarity[index_movie, ind]) for ind in best[:top] if ind != index_movie]

# Cell
def get_recommendations(user_id , similarity = dot_product_similarity(movies[genre_cols]) ):
    top_movies = ratings[ratings['user_id'] == user_id].sort_values(by='rating', ascending=False).head(3)['movie_id']
    index=['movie_id', 'title', 'similarity']

    most_similars = []
    for top_movie in top_movies:
        most_similars += get_most_similar(similarity, get_movie_name(movies, top_movie), get_movie_year(movies, top_movie))

    return pd.DataFrame(most_similars, columns=index).drop_duplicates().sort_values(by='similarity', ascending=False).head(5)